@startuml

skin rose

title Classes - Class Diagram

namespace db {
    interface AnalyzeDB  {
        + Analyze(ctx context.Context, table string) error
    }
    class DB << (S,Aquamarine) >> {
        - session <font color=blue>*gocql.Session</font>
        + Close() error
        + InitThread(ctx) <font color=blue>context.Context</font>
        + CleanupThread(ctx)
        + Read(ctx, table, key, fields) (values <font color=blue>map[string][]byte</font>, error)
        + Insert(ctx, table, key, values <font color=blue>map[string][]byte</font>) error
    }
}

namespace cache {
    class Node << (S,Aquamarine) >> {
        - redisClient <font color=blue>*redis.Client</font>
        - maxSize <font color=blue>int64</font>
        - id <font color=blue>int64</font>
        - nodeRing <font color=blue>*cache.NodeRing</font>
        + Recover()
        + Fail()
        + Size() <font color=blue>int64</font>
        + Get(ctx, key, fields)
        + Set(ctx, key, values)
    }
    class NodeRing << (S,Aquamarine) >> {
        + Ring <font color=blue>map</font>[int]int
        + SortedHashes []int
        + GetNode(key string) int
    }
    "NodeRing" <--* "getNodeIndex(key)""Node"
}

namespace bench {
    class main << (F,Lightblue) >> {
        + globalConfig
        + globalCache
        + globalDb
        + Run()
    }
}

"client.DbWrapper" <-left-o " ""bench.main"
"client.CacheWrapper" <-left-o " ""bench.main"
"client.Client" <-left- " ""bench.main" : Run(globalCtx)

namespace client {
    class CacheWrapper << (S,Aquamarine) >> {
        - nodes []*cache.Node
        - timers []*time.Timer
        - ctx context.Context
        + scheduleFailures()
        + Get(ctx, key, fields)
        + Set(ctx, key, values)
    }
    class Client << (S,Aquamarine) >> {
        + Run(ctx)
    }
    class DbWrapper << (S,Aquamarine) >> {
        + DB db.DB
        + P *config.Config
        + Close() error
        + InitThread(ctx) <font color=blue>context.Context</font>
        + CleanupThread(ctx)
        + Read(ctx, table, key, fields) (values <font color=blue>map[string][]byte</font>, error)
        + Insert(ctx, table, key, values <font color=blue>map[string][]byte</font>) error
        + Analyze(ctx context.Context, table string) error
    }
}
"cache.Node" --* "*""client.CacheWrapper"
"db.DB" <--* "wraps""client.DbWrapper"
"db.AnalyzeDB" <|-- "implements""client.DbWrapper"
"db.AnalyzeDB" -down[hidden]- " ""db.DB"
"client.DbWrapper" <.[hidden].o "creates""client.Client"

"client.Client" -right-> "InitThread()""workload.Workload"
"client.Client" *--> "Run()""workload.Worker"


"client.DbWrapper" <-- " ""workload.Workload" :  // Read, Insert             //
"client.CacheWrapper"  <-- " ""workload.Workload" : Get, Set


namespace generator {

    class Number << (S,Aquamarine) >> {
        + LastValue int64

        + SetLastValue(value int64)
        + Last() int64

    }
    class AcknowledgedCounter << (S,Aquamarine) >> {
        - c Counter
        - lock util.SpinLock
        - window []bool
        - limit int64

        + Next(r *rand.Rand) int64
        + Last() int64
        + Acknowledge(value int64)

    }
    class Constant << (S,Aquamarine) >> {
        - value int64

        + Next(_ *rand.Rand) int64
        + Last() int64

    }
    class Counter << (S,Aquamarine) >> {
        - counter int64

        + Next(_ *rand.Rand) int64
        + Last() int64

    }
    class Discrete << (S,Aquamarine) >> {
        - values []discretePair

        + Next(r *rand.Rand) int64
        + Add(weight float64, value int64)

    }
    class Exponential << (S,Aquamarine) >> {
        - gamma float64

        + Next(r *rand.Rand) int64

    }
    interface Generator  {
        + Next(r *rand.Rand) int64
        + Last() int64

    }
    class Histogram << (S,Aquamarine) >> {
        - blockSize int64
        - buckets []int64
        - area int64
        - weightedArea int64

        + Next(r *rand.Rand) int64

    }
    class Hotspot << (S,Aquamarine) >> {
        - lowerBound int64
        - upperBound int64
        - hotInterval int64
        - coldInterval int64
        - hotsetFraction float64
        - hotOpnFraction float64

        + Next(r *rand.Rand) int64

    }
    class ScrambledZipfian << (S,Aquamarine) >> {
        - gen *Zipfian
        - min int64
        - max int64
        - itemCount int64

        + Next(r *rand.Rand) int64

    }
    class Sequential << (S,Aquamarine) >> {
        - counter int64
        - interval int64
        - start int64

        + Next(_ *rand.Rand) int64
        + Last() int64

    }
    class SkewedLatest << (S,Aquamarine) >> {
        - basis Generator
        - zipfian *Zipfian

        + Next(r *rand.Rand) int64

    }
    class Uniform << (S,Aquamarine) >> {
        - lb int64
        - ub int64
        - interval int64

        + Next(r *rand.Rand) int64
    }
    class Zipfian << (S,Aquamarine) >> {
        - zeta(st, n, theta, sum) float64
        - next(r *rand.Rand, count) int64

        + Next(r *rand.Rand) int64
    }
}
"generator.Number" <-down- "extends""generator.Discrete"
"generator.Number" <-down- "extends""generator.Exponential"
"generator.Number" <-down- "extends""generator.Histogram"
"generator.Number" <-down-- "extends""generator.Hotspot"
"generator.Number" <-down-- "extends""generator.ScrambledZipfian"
"generator.Number" <-down--- "extends""generator.SkewedLatest"
"generator.Number" <-down--- "extends""generator.Uniform"
"generator.Number" <-down--- "extends""generator.Zipfian"

"generator.Generator" <|-- "implements""generator.AcknowledgedCounter"
"generator.Generator" <|-- "implements""generator.Constant"
"generator.AcknowledgedCounter" -[hidden]- " ""generator.Constant"
"generator.Generator" <|--- "implements""generator.Counter"
"generator.Generator" <|--- "implements""generator.Sequential"
"generator.Histogram" -[hidden]left- " ""generator.Exponential"
"generator.Histogram" -[hidden]right- " ""generator.Discrete"


namespace workload {
    class State << (S,Aquamarine) >> {
        - r *rand.Rand
        - fieldNames []string

    }
    class Worker << (S,Aquamarine) >> {
        - workDB db.DB
        - cache cache.Cache
        - workload *Workload
        - opCount int64
        - targetOpsPerMs float64
        - threadID int
        - targetOpsTickNs int64
        - opsDone int64

        - throttle(ctx context.Context, startTime time.Time)

        + Run(ctx context.Context)

    }
    class Workload << (S,Aquamarine) >> {
        - fieldLengthGenerator generator.Generator
        - keySequence generator.Generator
        - operationChooser generator.Number
        - keyChooser generator.Generator
        - fieldChooser generator.Generator
        - transactionInsertKeySequence generator.AcknowledgedCounter
        + InitThread(ctx context.Context, _ int, _ int) context.Context
        + DoTransaction(ctx context.Context, db db.DB, cache_ cache.Cache)
    }
    "Worker" *---> "DoTransaction()""Workload"
    "State" -left[hidden]- " ""Worker"
    "State" -left-o " ""Workload"
    "Workload" o-down- "*""generator.Generator"
    "Workload" o-down- " ""generator.AcknowledgedCounter"

    "Workload" o-down- " ""generator.Number"
}

@enduml